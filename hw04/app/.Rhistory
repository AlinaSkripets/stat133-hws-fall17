}
#Check
a <- c(1, 4, 7, NA, 10)
print_stats(a, na.rm = TRUE)
#rescale100
rescale100 <- function(x, xmin, xmax){
z <- 100*(x-xmin)/(xmax-xmin)
return(z)
}
#Check
b <- c(18, 15, 16, 4, 17, 9)
rescale100(b, xmin = 0, xmax = 20)
#drop_lowest
drop_lowest <- function(vec){
#a <- get_minimum(vec)
#output <- vec[!vec%in%a]
output <- sort(vec)
return(output[2:(length(vec))])
}
#Check
b <- c(10, 10, 8.5, 4, 7, 9, 1, 0, 0)
drop_lowest(b)
#score_homework
score_homework <- function(vec, drop=TRUE){
if (drop == TRUE) { drop_lowest(vec)
vec <- drop_lowest(vec)
output <- get_average(vec)
return(output) } else {
output <- get_average(vec)
return(output)
}
}
#Check
hws <- c(100, 80, 30, 70, 75, 85)
score_homework(hws, drop = TRUE)
score_homework(hws, drop = FALSE)
#score_quiz
score_quiz <- function(quiz, drop=TRUE){
if (drop == TRUE) { drop_lowest(quiz)
quiz <- drop_lowest(quiz)
output <- get_average(quiz)
return(output) } else {
output <- get_average(quiz)
return(output)
}
}
#Check
quizzes <- c(100, 80, 70, 0)
score_quiz(quizzes, drop = TRUE)
score_quiz(quizzes, drop = FALSE)
#score_lab
score_lab <- function(att){
switch(att,
0,0,0,0,0,0,20,40,60,80,100,100)
}
#Check
score_lab(12)
score_lab(10)
score_lab(6)
#-----------
#Alina Skripets
#Testing
#-----------
library(testthat)
#Include at least four expectations for each function (e.g. expect_equal())
source('./functions.R')
#-----------
vec <- c(1,2,3,4,5,NA,NA)
context("testing remove missing")
test_that('testing remove missing', {
expect_equivalent(remove_missing(vec), na.omit(vec))
expect_equal(remove_missing(c(1, 2, 3)), c(1,2,3))
expect_equal(remove_missing(c(1,2,3,NA)), c(1,2,3))
expect_equal(remove_missing(c(NA, NA, NA)), numeric(0))
})
context("testing get_minimum")
test_that('testing get_minimum', {
expect_error(get_minimum(c('a', 1, 2, 3)))
expect_equal(get_minimum(c(1, 2, 3)), 1)
expect_equal(get_minimum(c(1,2,3,NA)), get_minimum(c(1,2,3)))
expect_equal(length(get_minimum(vec)), 1)
})
context("testing get_maximum")
test_that('testing get_maximum', {
expect_error(get_maximum(c('a', 1, 2, 3)))
expect_equal(get_maximum(c(1, 2, 3)), 3)
expect_equal(get_maximum(c(1,2,3,NA)), get_maximum(c(1,2,3)))
expect_equal(length(get_maximum(vec)), 1)
})
context("testing get_range")
test_that('testing get_range', {
expect_error(get_range(c('a', 1, 2, 3)))
expect_equal(get_range(c(1, 2, 3)), 2)
expect_equal(get_range(c(1,2,3,NA)), get_range(c(1,2,3)))
expect_equal(length(get_range(vec)), 1)
})
context("testing get_percentile10")
test_that('testing get_percentile10', {
expect_error(get_percentile10(c('a', 1, 2, 3)))
expect_equivalent(get_percentile10(c(1, 2, 3)), quantile(c(1, 2, 3), 0.1))
expect_equal(get_percentile10(c(1,2,3,NA)), get_percentile10(c(1,2,3)))
expect_equal(length(get_percentile10(vec)), 1)
})
context("testing get_percentile90")
test_that('testing get_percentile90', {
expect_error(get_percentile90(c('a', 1, 2, 3)))
expect_equivalent(get_percentile90(c(1, 2, 3)), quantile(c(1, 2, 3), 0.9))
expect_equal(get_percentile90(c(1,2,3,NA)), get_percentile90(c(1,2,3)))
expect_equal(length(get_percentile90(vec)), 1)
})
context("testing get_median")
test_that('testing get_median', {
expect_error(get_median(c('a', 1, 2, 3)))
expect_equivalent(get_median(c(1, 2, 3)), quantile(c(1, 2, 3), 0.5))
expect_equal(get_median(c(1,2,3,NA)), get_median(c(1,2,3)))
expect_equal(length(get_median(vec)), 1)
})
context("testing get_average")
test_that('testing get_average', {
expect_error(get_average(c('a', 1, 2, 3)))
expect_equivalent(get_average(c(1, 2, 3)), mean(c(1, 2, 3)))
expect_equal(get_average(c(1,2,3,NA)), get_average(c(1,2,3)))
expect_equal(length(get_average(vec)), 1)
})
context("testing get_stdev")
test_that('testing get_stdev', {
expect_error(get_stdev(c('a', 1, 2, 3)))
expect_equivalent(get_stdev(c(1, 2, 3)), sd(c(1, 2, 3)))
expect_equal(get_stdev(c(1,2,3,NA)), get_stdev(c(1,2,3)))
expect_equal(length(get_stdev(vec)), 1)
})
context("testing get_quartile1")
test_that('testing get_quartile1', {
expect_error(get_quartile1(c('a', 1, 2, 3)))
expect_equivalent(get_quartile1(c(1, 2, 3)), quantile(c(1, 2, 3), 0.25))
expect_equal(get_quartile1(c(1,2,3,NA)), get_quartile1(c(1,2,3)))
expect_equal(length(get_quartile1(vec)), 1)
})
context("testing get_quartile3")
test_that('testing get_quartile3', {
expect_error(get_quartile3(c('a', 1, 2, 3)))
expect_equivalent(get_quartile3(c(1, 2, 3)), quantile(c(1, 2, 3), 0.75))
expect_equal(get_quartile3(c(1,2,3,NA)), get_quartile3(c(1,2,3)))
expect_equal(length(get_quartile3(vec)), 1)
})
context("testing count_missing")
test_that('testing count_missing', {
expect_error(count_missing(c('a', 1, 2, 3)))
expect_equivalent(count_missing(vec), sum(is.na(vec)))
expect_equal(count_missing(c(1,2,3,NA, NA, NA)), 3)
expect_equal(length(count_missing(vec)), 1)
})
context("testing summary_stats")
test_that('testing summary_stats', {
expect_error(summary_stats(c('a', 1, 2, 3)))
expect_equivalent(typeof(summary_stats(vec)), typeof(list()))
expect_equal(length(summary_stats(vec)), 11)
expect_identical(names(summary_stats(vec)),
c("minimum", "percent10", "quartile1", "median", "mean", "quartile3",
"percent90", "maximum", "range", "stdev", "missing"))
})
context("testing print_stats")
test_that('testing print_stats', {
expect_error(print_stats(c('a', 1, 2, 3)))
expect_equivalent(typeof(print_stats(vec)), "NULL")
expect_equal(length(print_stats(vec)), 0)
expect_error(print_stats(list(c(1,3), "b", 3)))
})
context("testing rescale100")
test_that('testing rescale100', {
expect_error(rescale100(c('a', 1, 2, 3), 0, 100))
expect_equivalent(rescale100(vec, 0, 100), vec)
expect_equal(typeof(rescale100(c(1,2,3), 0, 100)), 'double')
expect_equal(length(rescale100(vec, 0, 100)), length(vec))
})
context("testing drop_lowest")
test_that('testing drop_lowest', {
expect_identical(drop_lowest(c(1,1,1)), c(1,1))
expect_equivalent(drop_lowest(c(0, 100)), 100)
expect_equal(length(drop_lowest(vec)), length(vec)-1)
expect_equal(sum(vec)-sum(drop_lowest(vec)), min(vec))
})
context("testing score_homework")
test_that('testing score_homework', {
expect_false(score_homework(vec, 1) == score_homework(vec, 2))
expect_equivalent(score_homework(c(0, 100)), 100)
expect_equal(length(score_homework(vec)), 1)
expect_gt(score_homework(vec, 1), score_homework(vec,2))
})
context("testing score_quiz")
test_that('testing score_quiz', {
expect_false(score_quiz(vec, 1) == score_quiz(vec, 2))
expect_equivalent(score_quiz(c(0, 100)), 100)
expect_equal(length(score_quiz(vec)), 1)
expect_gt(score_quiz(vec, 1), score_quiz(vec,2))
})
context("testing score_lab")
test_that('testing score_lab', {
expect_type(score_lab(1), 'double')
expect_identical(score_lab(11), score_lab(12))
expect_equal(length(score_lab(7)), 1)
expect_gt(score_lab(10), score_lab(7))
})
#Alina Skripets
#Testing
#-----------
# test script
library(testthat)
# source in functions to be tested
source('./functions.R')
sink('../output/test-reporter.txt')
test_file('./tests.R')
sink()
#Clean Data Script
#-----------
source("./functions.R")
dat <- read.csv('../data/rawdata/rawscores.csv', stringsAsFactors = FALSE)
#Get stats
sink('../output/summary-rawscores.txt')
str(dat)
for (i in 1:334){
print(paste('For colomne', i, 'the summary is:'))
vec <- summary_stats(as.numeric(unname(dat[i, ]), TRUE))
print(vec)
print_stats(as.numeric(unname(dat[i, ]), TRUE))
print(noquote('   '))}
sink()
#Remove NA
for (i in 1:334){
for (j in 1:16){
if(is.na(dat[i,j])){dat[i,j] <- 0}
}
}
#Rescale Quiz
dat$QZ1 <- rescale100(dat$QZ1, xmin <- 0, xmax <- 12)
dat$QZ2 <- rescale100(dat$QZ2, 0, 18)
dat$QZ3 <- rescale100(dat$QZ3, 0, 20)
dat$QZ4 <- rescale100(dat$QZ4, 0, 20)
#Rescale Exams
dat$Test1 <- rescale100(dat$EX1, 0, 80)
dat$Test2 <- rescale100(dat$EX2, 0, 90)
#Add HW
for (i in 1:334){
vec <- unlist(unname(dat[i, 1:9]))
dat$Homework[i] <- score_homework(unlist(vec)) }
#Alt. way
#   vec <- numeric(8)
#  vec <- unlist(unname(dat[i, 1:9]))
# vec <- drop_lowest(unname(dat[i, 1:9]))
#dat$Homework[i] <- get_average(unlist(vec))
#}
#Add Quiz
for (i in 1:334){
vec <- unlist(unname(dat[i, 11:14]))
dat$Quiz[i] <- score_quiz(unlist(vec)) }
#Alt. way
#for (i in 1:334){
# vec <- numeric(8)
#vec <- unlist(unname(dat[i, 11:14]))
#vec <- drop_lowest(unname(dat[i, 11:14]))
#dat$Quiz[i] <- get_average(unlist(vec))
#}
#Add Lab
for (i in 1:334){
vec <- dat$ATT[i]
dat$Lab[i] <- score_lab(unlist(vec))
}
#Add Overall
for (i in 1:334){
dat$Overall[i] <- 0.1*dat$Lab[i]+0.3*dat$Homework[i]+0.15*dat$Quiz[i]+0.2*dat$Test1[i]+0.25*dat$Test2[i]
}
#Grade
for (i in 1:334){
if (dat$Overall[i] <= 100 & dat$Overall[i] >= 95){dat$Grade[i]='A+'}
else if (dat$Overall[i] < 95 &dat$Overall[i] >=90){dat$Grade[i]='A'}
else if (dat$Overall[i] < 90 &dat$Overall[i] >=88){dat$Grade[i]='A-'}
else if (dat$Overall[i] < 88 &dat$Overall[i] >=86){dat$Grade[i]='B+'}
else if (dat$Overall[i] < 86 &dat$Overall[i] >=82){dat$Grade[i]='B'}
else if (dat$Overall[i] < 82 &dat$Overall[i] >=79.5){dat$Grade[i]='B-'}
else if (dat$Overall[i] < 79.5 &dat$Overall[i] >=77.5){dat$Grade[i]='C+'}
else if (dat$Overall[i] < 77.5 &dat$Overall[i] >=70){dat$Grade[i]='C'}
else if (dat$Overall[i] < 70 &dat$Overall[i] >=60){dat$Grade[i]='C-'}
else if (dat$Overall[i] < 60 &dat$Overall[i] >=50){dat$Grade[i]='D'}
else if (dat$Overall[i] < 50){dat$Grade[i]='F'}
}
#Get more stats
for (i in 17:22){
sink(paste('output/', names(dat[i]), ' - stats.txt'), type = 'output')
print_stats(unlist(unname(summary_stats(unlist(unname(dat[i]))))))
sink()
}
#Even more sinking
sink('output/summary-cleanscores.txt')
str(dat)
sink()
#Exporting
write.csv(dat, 'data/cleandata/cleanscores.csv')
#Remove NA
for (i in 1:334){
for (j in 1:16){
if(is.na(dat[i,j])){dat[i,j] <- 0}
}
}
#Rescale Quiz
dat$QZ1 <- rescale100(dat$QZ1, xmin <- 0, xmax <- 12)
dat$QZ2 <- rescale100(dat$QZ2, 0, 18)
dat$QZ3 <- rescale100(dat$QZ3, 0, 20)
dat$QZ4 <- rescale100(dat$QZ4, 0, 20)
#Rescale Exams
dat$Test1 <- rescale100(dat$EX1, 0, 80)
dat$Test2 <- rescale100(dat$EX2, 0, 90)
#Add HW
for (i in 1:334){
vec <- unlist(unname(dat[i, 1:9]))
dat$Homework[i] <- score_homework(unlist(vec)) }
#Alt. way
#   vec <- numeric(8)
#  vec <- unlist(unname(dat[i, 1:9]))
# vec <- drop_lowest(unname(dat[i, 1:9]))
#dat$Homework[i] <- get_average(unlist(vec))
#}
#Add Quiz
for (i in 1:334){
vec <- unlist(unname(dat[i, 11:14]))
dat$Quiz[i] <- score_quiz(unlist(vec)) }
#Alt. way
#for (i in 1:334){
# vec <- numeric(8)
#vec <- unlist(unname(dat[i, 11:14]))
#vec <- drop_lowest(unname(dat[i, 11:14]))
#dat$Quiz[i] <- get_average(unlist(vec))
#}
#Add Lab
for (i in 1:334){
vec <- dat$ATT[i]
dat$Lab[i] <- score_lab(unlist(vec))
}
#Add Overall
for (i in 1:334){
dat$Overall[i] <- 0.1*dat$Lab[i]+0.3*dat$Homework[i]+0.15*dat$Quiz[i]+0.2*dat$Test1[i]+0.25*dat$Test2[i]
}
#Grade
for (i in 1:334){
if (dat$Overall[i] <= 100 & dat$Overall[i] >= 95){dat$Grade[i]='A+'}
else if (dat$Overall[i] < 95 &dat$Overall[i] >=90){dat$Grade[i]='A'}
else if (dat$Overall[i] < 90 &dat$Overall[i] >=88){dat$Grade[i]='A-'}
else if (dat$Overall[i] < 88 &dat$Overall[i] >=86){dat$Grade[i]='B+'}
else if (dat$Overall[i] < 86 &dat$Overall[i] >=82){dat$Grade[i]='B'}
else if (dat$Overall[i] < 82 &dat$Overall[i] >=79.5){dat$Grade[i]='B-'}
else if (dat$Overall[i] < 79.5 &dat$Overall[i] >=77.5){dat$Grade[i]='C+'}
else if (dat$Overall[i] < 77.5 &dat$Overall[i] >=70){dat$Grade[i]='C'}
else if (dat$Overall[i] < 70 &dat$Overall[i] >=60){dat$Grade[i]='C-'}
else if (dat$Overall[i] < 60 &dat$Overall[i] >=50){dat$Grade[i]='D'}
else if (dat$Overall[i] < 50){dat$Grade[i]='F'}
}
#Get more stats
for (i in 17:22){
sink(paste('../output/', names(dat[i]), ' - stats.txt'), type = 'output')
print_stats(unlist(unname(summary_stats(unlist(unname(dat[i]))))))
sink()
}
#Even more sinking
sink('../output/summary-cleanscores.txt')
str(dat)
sink()
#Exporting
write.csv(dat, '../data/cleandata/cleanscores.csv')
getwd()
setwd("/Users/Alina 1/stat133/stat133-hws-fall17/hw04/app")
runApp('app6')
getwd()
runApp('app6')
runApp('app7')
runApp('app7')
read.csv('../data/cleandata/cleanscores.csv')
dat <- read.csv('../data/cleandata/cleanscores.csv')
dat <- read.csv('../data/cleandata/cleanscores.csv', stringsAsFactors = FALSE)
View(dat)
dat <- dat[2:333, ]
dat <- read.csv('../data/cleandata/cleanscores.csv', stringsAsFactors = FALSE)
rownames(dat) <- c(' ')
runApp('app7')
dat <- read.csv('../data/cleandata/cleanscores.csv', stringsAsFactors = FALSE)
dat <- read.csv('../data/cleandata/cleanscores.csv', stringsAsFactors = FALSE)
runApp('app7')
runApp('app7')
t <- table(dat$Grade, levels <- c('A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D', 'F')
#t <-   table(dat$Grade)
#colnames(t) <-c("Grade")
t
})
t <- table(dat$Grade, levels <- c('A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D', 'F'))
factor(dat$Grade, levels <- c('A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D', 'F'))
runApp('app7')
source("../code/functions.R")
dat <- read.csv('../data/cleandata/cleanscores.csv', stringsAsFactors = FALSE)
runApp('app7')
runApp('app7')
runApp('app7')
t <- table(factor(dat$Grade, levels <- c('A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D', 'F')))
out1 <- as.data.frame(t)
is.data.frame(out1)
runApp('app7')
runApp('app6')
runApp('app7')
View(dat)
dat <- read.csv('../data/cleandata/cleanscores.csv', stringsAsFactors = FALSE)
runApp('app7')
View(dat)
setwd(/Users/Alina 1/stat133/stat133-hws-fall17/hw04/app)
setwd("Users/Alina 1/stat133/stat133-hws-fall17/hw04/app")
getwd()
source("../code/functions.R")
runApp('app7')
dat <- read.csv('../data/cleandata/cleanscores.csv', stringsAsFactors = FALSE)
runApp('app7')
runApp('app7')
dat <- read.csv('../data/rawdata/rawscores.csv', stringsAsFactors = FALSE)
#Remove NA
for (i in 1:334){
for (j in 1:16){
if(is.na(dat[i,j])){dat[i,j] <- 0}
}
}
#Rescale Quiz
dat$QZ1 <- rescale100(dat$QZ1, xmin <- 0, xmax <- 12)
dat$QZ2 <- rescale100(dat$QZ2, 0, 18)
dat$QZ3 <- rescale100(dat$QZ3, 0, 20)
dat$QZ4 <- rescale100(dat$QZ4, 0, 20)
#Rescale Exams
dat$Test1 <- rescale100(dat$EX1, 0, 80)
dat$Test2 <- rescale100(dat$EX2, 0, 90)
#Add HW
for (i in 1:334){
vec <- unlist(unname(dat[i, 1:9]))
dat$Homework[i] <- score_homework(unlist(vec)) }
#Alt. way
#   vec <- numeric(8)
#  vec <- unlist(unname(dat[i, 1:9]))
# vec <- drop_lowest(unname(dat[i, 1:9]))
#dat$Homework[i] <- get_average(unlist(vec))
#}
#Add Quiz
for (i in 1:334){
vec <- unlist(unname(dat[i, 11:14]))
dat$Quiz[i] <- score_quiz(unlist(vec)) }
#Alt. way
#for (i in 1:334){
# vec <- numeric(8)
#vec <- unlist(unname(dat[i, 11:14]))
#vec <- drop_lowest(unname(dat[i, 11:14]))
#dat$Quiz[i] <- get_average(unlist(vec))
#}
#Add Lab
for (i in 1:334){
vec <- dat$ATT[i]
dat$Lab[i] <- score_lab(unlist(vec))
}
#Add Overall
for (i in 1:334){
dat$Overall[i] <- 0.1*dat$Lab[i]+0.3*dat$Homework[i]+0.15*dat$Quiz[i]+0.2*dat$Test1[i]+0.25*dat$Test2[i]
}
#Grade
for (i in 1:334){
if (dat$Overall[i] <= 100 & dat$Overall[i] >= 95){dat$Grade[i]='A+'}
else if (dat$Overall[i] < 95 &dat$Overall[i] >=90){dat$Grade[i]='A'}
else if (dat$Overall[i] < 90 &dat$Overall[i] >=88){dat$Grade[i]='A-'}
else if (dat$Overall[i] < 88 &dat$Overall[i] >=86){dat$Grade[i]='B+'}
else if (dat$Overall[i] < 86 &dat$Overall[i] >=82){dat$Grade[i]='B'}
else if (dat$Overall[i] < 82 &dat$Overall[i] >=79.5){dat$Grade[i]='B-'}
else if (dat$Overall[i] < 79.5 &dat$Overall[i] >=77.5){dat$Grade[i]='C+'}
else if (dat$Overall[i] < 77.5 &dat$Overall[i] >=70){dat$Grade[i]='C'}
else if (dat$Overall[i] < 70 &dat$Overall[i] >=60){dat$Grade[i]='C-'}
else if (dat$Overall[i] < 60 &dat$Overall[i] >=50){dat$Grade[i]='D'}
else if (dat$Overall[i] < 50){dat$Grade[i]='F'}
}
#Get more stats
for (i in 17:22){
sink(paste('../output/', names(dat[i]), ' - stats.txt'), type = 'output')
print_stats(unlist(unname(summary_stats(unlist(unname(dat[i]))))))
sink()
}
#Even more sinking
sink('../output/summary-cleanscores.txt')
str(dat)
sink()
#Exporting
write.csv(dat, '../data/cleandata/cleanscores.csv')
View(dat)
runApp('app7')
runApp('app7')
runApp('app7')
dat %>%
ggvis(~Grade) %>%
layer_histograms()
install.packages('ggvis')
library(ggvis)
dat %>%
ggvis(~Grade) %>%
layer_histograms()
dat %>%
ggvis(~Grade) %>%
layer_histograms()
ggvis(dat, ~Grade) +
layer_histograms()
ggvis(dat, ~Grade)
dat$Grade <- factor(dat$Grade, levels <- c('A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D', 'F'))
ggvis(dat, ~Grade)
ggvis(dat, ~Grade)+layer_bars()
layer_bars(ggvis(dat, ~Grade))
runApp('app7')
runApp('app7')
